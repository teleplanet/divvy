{"version":3,"sources":["meteor://ğŸ’»app/imports/api/posts/posts.js","meteor://ğŸ’»app/server/api/user/auth.js","meteor://ğŸ’»app/server/api/user/publish.js","meteor://ğŸ’»app/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAQ,KAAR,QAAoB,cAApB;;AAEA,OAAO,IAAM,QAAQ,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAd,+B;;;;;;;;;;;;ACDP,SAAS,eAAT,CAAyB,UAAC,IAAD,EAAU;;;;;;;;;;;;AAYjC,SAAO,IAAP;AACD,CAbD;;AAeA,OAAO,OAAP,CAAe;AACb,sBADa,6BACQ,KADR,EACc;;AAEzB,QAAI,SAAS,eAAT,CAAyB,KAAzB,CAAJ,EAAqC;;AAEnC,aAAO,KAAP;AACD,KAHD,MAGM;;AAEJ,aAAO,IAAP;AACD;AACF;AAVY,CAAf,+E;;;;;;;;;;;AChBA,OAAO,OAAP,CAAe,cAAf,EAA+B,UAAU,MAAV,EAAkB;;;;AAM/C,MAAM,WAAW;AACf,SAAK,KAAK;AADK,GAAjB;;;AAKA,MAAM,UAAU;AACd,YAAQ,EAAE,WAAW,CAAb;AADM,GAAhB;;AAIA,SAAO,OAAO,KAAP,CAAa,IAAb,CAAkB,QAAlB,EAA4B,OAA5B,CAAP;AACD,CAhBD,+E;;;;;;;;;;;ACAA,SAAS,MAAT,QAAuB,eAAvB;AACA,OAAO,+BAAP;;AAEA,OAAO,OAAP,CAAe,YAAM;;AAEpB,CAFD,8E","file":"/app.js","sourcesContent":["import {Mongo} from 'meteor/mongo';\r\n\r\nexport const Posts = new Mongo.Collection('posts');","// Ensuring every user has an email address, should be in server-side code\r\nAccounts.validateNewUser((user) => {\r\n  /*new SimpleSchema({\r\n    _id: { type: String },\r\n    emails: { type: Array },\r\n    'emails.$': { type: Object },\r\n    'emails.$.address': { type: String },\r\n    'emails.$.verified': { type: Boolean },\r\n    createdAt: { type: Date },\r\n    services: { type: Object, blackbox: true }\r\n  }).validate(user);*/\r\n\r\n  // Return true to allow user creation to proceed\r\n  return true;\r\n});\r\n\r\nMeteor.methods({\r\n  'auth.validateEmail'(email){\r\n    //check if email account already exists\r\n    if (Accounts.findUserByEmail(email)) {\r\n      //return false if email account exists\r\n      return false;\r\n    }else {\r\n      //return true if email account does not exist\r\n      return true;\r\n    }\r\n  },\r\n});","Meteor.publish('user.details', function (userid) {\r\n  // Validate the arguments to be what we expect\r\n\r\n\r\n\r\n  // Select only the users that match the array of IDs passed in\r\n  const selector = {\r\n    _id: this.userId,\r\n  };\r\n\r\n  // Only return one field, `initials`\r\n  const options = {\r\n    fields: { 'profile': 1 }\r\n  };\r\n\r\n  return Meteor.users.find(selector, options);\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport '../imports/api/posts/posts.js';\r\n\r\nMeteor.startup(() => {\r\n  // code to run on server at startup\r\n});\r\n"]}