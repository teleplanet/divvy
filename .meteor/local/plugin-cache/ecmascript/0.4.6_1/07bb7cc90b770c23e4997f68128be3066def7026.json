{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/reactive-dict/reactive-dict-tests.js","filenameRelative":"/packages/reactive-dict/reactive-dict-tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/reactive-dict/reactive-dict-tests.js.map","sourceFileName":"/packages/reactive-dict/reactive-dict-tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"reactive-dict-tests"},"ignored":false,"code":"Tinytest.add('ReactiveDict - set to undefined', function (test) {\n  var dict = new ReactiveDict();\n  dict.set('foo', undefined);\n  test.equal(_.keys(dict.all()), ['foo']);\n  dict.setDefault('foo', 'bar');\n  test.equal(dict.get('foo'), undefined);\n});\n\nTinytest.add('ReactiveDict - setDefault', function (test) {\n  var dict = new ReactiveDict();\n  dict.set('A', 'blah');\n  dict.set('B', undefined);\n  dict.setDefault('A', 'default');\n  dict.setDefault('B', 'default');\n  dict.setDefault('C', 'default');\n  dict.setDefault('D', undefined);\n  test.equal(dict.all(), { A: 'blah', B: undefined,\n    C: 'default', D: undefined });\n\n  dict = new ReactiveDict();\n  dict.set('A', 'blah');\n  dict.set('B', undefined);\n  dict.setDefault({\n    A: 'default',\n    B: 'defualt',\n    C: 'default',\n    D: undefined\n  });\n  test.equal(dict.all(), { A: 'blah', B: undefined,\n    C: 'default', D: undefined });\n});\n\nTinytest.add('ReactiveDict - all() works', function (test) {\n  var all = {},\n      dict = new ReactiveDict();\n  Tracker.autorun(function () {\n    all = dict.all();\n  });\n\n  test.equal(all, {});\n\n  dict.set('foo', 'bar');\n  Tracker.flush();\n  test.equal(all, { foo: 'bar' });\n\n  dict.set('blah', undefined);\n  Tracker.flush();\n  test.equal(all, { foo: 'bar', blah: undefined });\n});\n\nTinytest.add('ReactiveDict - clear() works', function (test) {\n  var dict = new ReactiveDict();\n  dict.set('foo', 'bar');\n\n  // Clear should not throw an error now\n  // See issue #5530\n  dict.clear();\n\n  dict.set('foo', 'bar');\n\n  var val, equals, equalsUndefined, all;\n  Tracker.autorun(function () {\n    val = dict.get('foo');\n  });\n  Tracker.autorun(function () {\n    equals = dict.equals('foo', 'bar');\n  });\n  Tracker.autorun(function () {\n    equalsUndefined = dict.equals('foo', undefined);\n  });\n  Tracker.autorun(function () {\n    all = dict.all();\n  });\n\n  test.equal(val, 'bar');\n  test.equal(equals, true);\n  test.equal(equalsUndefined, false);\n  test.equal(all, { foo: 'bar' });\n\n  dict.clear();\n  Tracker.flush();\n  test.isUndefined(val);\n  test.equal(equals, false);\n  test.equal(equalsUndefined, true);\n  test.equal(all, {});\n});\n\nTinytest.add('ReactiveDict - delete(key) works', function (test) {\n  var dict = new ReactiveDict();\n  dict.set('foo', 'bar');\n  dict.set('bar', 'foo');\n\n  dict.set('baz', 123);\n  test.equal(dict['delete']('baz'), true);\n  test.equal(dict['delete']('baz'), false);\n\n  var val, equals, equalsUndefined, all;\n\n  Tracker.autorun(function () {\n    val = dict.get('foo');\n  });\n  Tracker.autorun(function () {\n    equals = dict.equals('foo', 'bar');\n  });\n  Tracker.autorun(function () {\n    equalsUndefined = dict.equals('foo', undefined);\n  });\n  Tracker.autorun(function () {\n    all = dict.all();\n  });\n\n  test.equal(val, 'bar');\n  test.equal(equals, true);\n  test.equal(equalsUndefined, false);\n  test.equal(all, { foo: 'bar', bar: 'foo' });\n\n  var didRemove = dict['delete']('foo');\n  test.equal(didRemove, true);\n\n  Tracker.flush();\n\n  test.isUndefined(val);\n  test.equal(equals, false);\n  test.equal(equalsUndefined, true);\n  test.equal(all, { bar: 'foo' });\n\n  didRemove = dict['delete']('barfoobar');\n  test.equal(didRemove, false);\n});","ast":null,"map":{"version":3,"sources":["/packages/reactive-dict/reactive-dict-tests.js"],"names":[],"mappings":"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","file":"/packages/reactive-dict/reactive-dict-tests.js.map","sourcesContent":["Tinytest.add('ReactiveDict - set to undefined', function (test) {\n  var dict = new ReactiveDict;\n  dict.set('foo', undefined);\n  test.equal(_.keys(dict.all()), ['foo']);\n  dict.setDefault('foo', 'bar');\n  test.equal(dict.get('foo'), undefined);\n});\n\nTinytest.add('ReactiveDict - setDefault', function (test) {\n  var dict = new ReactiveDict;\n  dict.set('A', 'blah');\n  dict.set('B', undefined);\n  dict.setDefault('A', 'default');\n  dict.setDefault('B', 'default');\n  dict.setDefault('C', 'default');\n  dict.setDefault('D', undefined);\n  test.equal(dict.all(), {A: 'blah', B: undefined,\n                          C: 'default', D: undefined});\n\n  dict = new ReactiveDict;\n  dict.set('A', 'blah');\n  dict.set('B', undefined);\n  dict.setDefault({\n    A: 'default',\n    B: 'defualt',\n    C: 'default',\n    D: undefined\n  });\n  test.equal(dict.all(), {A: 'blah', B: undefined,\n                          C: 'default', D: undefined});\n});\n\nTinytest.add('ReactiveDict - all() works', function (test) {\n  var all = {}, dict = new ReactiveDict;\n  Tracker.autorun(function() {\n    all = dict.all();\n  });\n\n  test.equal(all, {});\n\n  dict.set('foo', 'bar');\n  Tracker.flush();\n  test.equal(all, {foo: 'bar'});\n\n  dict.set('blah', undefined);\n  Tracker.flush();\n  test.equal(all, {foo: 'bar', blah: undefined});\n});\n\n\nTinytest.add('ReactiveDict - clear() works', function (test) {\n  var dict = new ReactiveDict;\n  dict.set('foo', 'bar');\n\n  // Clear should not throw an error now\n  // See issue #5530\n  dict.clear();\n\n  dict.set('foo', 'bar');\n\n  var val, equals, equalsUndefined, all;\n  Tracker.autorun(function() {\n    val = dict.get('foo');\n  });\n  Tracker.autorun(function() {\n    equals = dict.equals('foo', 'bar');\n  });\n  Tracker.autorun(function() {\n    equalsUndefined = dict.equals('foo', undefined);\n  });\n  Tracker.autorun(function() {\n    all = dict.all();\n  });\n\n  test.equal(val, 'bar');\n  test.equal(equals, true);\n  test.equal(equalsUndefined, false);\n  test.equal(all, {foo: 'bar'});\n\n  dict.clear();\n  Tracker.flush();\n  test.isUndefined(val);\n  test.equal(equals, false);\n  test.equal(equalsUndefined, true);\n  test.equal(all, {});\n});\n\nTinytest.add('ReactiveDict - delete(key) works', function (test) {\n  var dict = new ReactiveDict;\n  dict.set('foo', 'bar');\n  dict.set('bar', 'foo');\n\n  dict.set('baz', 123);\n  test.equal(dict.delete('baz'), true);\n  test.equal(dict.delete('baz'), false);\n\n  var val, equals, equalsUndefined, all;\n\n  Tracker.autorun(function() {\n    val = dict.get('foo');\n  });\n  Tracker.autorun(function() {\n    equals = dict.equals('foo', 'bar');\n  });\n  Tracker.autorun(function() {\n    equalsUndefined = dict.equals('foo', undefined);\n  });\n  Tracker.autorun(function() {\n    all = dict.all();\n  });\n\n  test.equal(val, 'bar');\n  test.equal(equals, true);\n  test.equal(equalsUndefined, false);\n  test.equal(all, {foo: 'bar', bar: 'foo'});\n\n  var didRemove = dict.delete('foo');\n  test.equal(didRemove, true);\n\n  Tracker.flush();\n\n  test.isUndefined(val);\n  test.equal(equals, false);\n  test.equal(equalsUndefined, true);\n  test.equal(all, {bar: 'foo'});\n\n  didRemove = dict.delete('barfoobar');\n  test.equal(didRemove, false);\n});\n"]},"hash":"07bb7cc90b770c23e4997f68128be3066def7026"}
