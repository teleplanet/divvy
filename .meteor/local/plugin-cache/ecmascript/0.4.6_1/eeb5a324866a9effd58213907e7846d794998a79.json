{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/reactive-dict/reactive-dict.js","filenameRelative":"/packages/reactive-dict/reactive-dict.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/reactive-dict/reactive-dict.js.map","sourceFileName":"/packages/reactive-dict/reactive-dict.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"reactive-dict"},"ignored":false,"code":"var _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nvar stringify = function stringify(value) {\n  if (value === undefined) return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') return undefined;\n  return EJSON.parse(serialized);\n};\n\nvar changed = function changed(v) {\n  v && v.changed();\n};\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nReactiveDict = function (_ReactiveDict) {\n  function ReactiveDict(_x) {\n    return _ReactiveDict.apply(this, arguments);\n  }\n\n  ReactiveDict.toString = function () {\n    return _ReactiveDict.toString();\n  };\n\n  return ReactiveDict;\n}(function (dictName) {\n  // this.keys: key -> value\n  if (dictName) {\n    if (typeof dictName === 'string') {\n      // the normal case, argument is a string name.\n      // _registerDictForMigrate will throw an error on duplicate name.\n      ReactiveDict._registerDictForMigrate(dictName, this);\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};\n      this.name = dictName;\n    } else if ((typeof dictName === 'undefined' ? 'undefined' : (0, _typeof3['default'])(dictName)) === 'object') {\n      // back-compat case: dictName is actually migrationData\n      this.keys = dictName;\n    } else {\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n    }\n  } else {\n    // no name given; no migration will be performed\n    this.keys = {};\n  }\n\n  this.allDeps = new Tracker.Dependency();\n  this.keyDeps = {}; // key -> Dependency\n  this.keyValueDeps = {}; // key -> Dependency\n});\n\n_.extend(ReactiveDict.prototype, {\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n  set: function () {\n    function set(keyOrObject, value) {\n      var self = this;\n\n      if ((typeof keyOrObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(keyOrObject)) === 'object' && value === undefined) {\n        // Called as `dict.set({...})`\n        self._setObject(keyOrObject);\n        return;\n      }\n      // the input isn't an object, so it must be a key\n      // and we resume with the rest of the function\n      var key = keyOrObject;\n\n      value = stringify(value);\n\n      var keyExisted = _.has(self.keys, key);\n      var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';\n      var isNewValue = value !== oldSerializedValue;\n\n      self.keys[key] = value;\n\n      if (isNewValue || !keyExisted) {\n        self.allDeps.changed();\n      }\n\n      if (isNewValue) {\n        changed(self.keyDeps[key]);\n        if (self.keyValueDeps[key]) {\n          changed(self.keyValueDeps[key][oldSerializedValue]);\n          changed(self.keyValueDeps[key][value]);\n        }\n      }\n    }\n\n    return set;\n  }(),\n\n  setDefault: function () {\n    function setDefault(keyOrObject, value) {\n      var self = this;\n\n      if ((typeof keyOrObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(keyOrObject)) === 'object' && value === undefined) {\n        // Called as `dict.setDefault({...})`\n        self._setDefaultObject(keyOrObject);\n        return;\n      }\n      // the input isn't an object, so it must be a key\n      // and we resume with the rest of the function\n      var key = keyOrObject;\n\n      if (!_.has(self.keys, key)) {\n        self.set(key, value);\n      }\n    }\n\n    return setDefault;\n  }(),\n\n  get: function () {\n    function get(key) {\n      var self = this;\n      self._ensureKey(key);\n      self.keyDeps[key].depend();\n      return parse(self.keys[key]);\n    }\n\n    return get;\n  }(),\n\n  equals: function () {\n    function equals(key, value) {\n      var self = this;\n\n      // Mongo.ObjectID is in the 'mongo' package\n      var ObjectID = null;\n      if (Package.mongo) {\n        ObjectID = Package.mongo.Mongo.ObjectID;\n      }\n\n      // We don't allow objects (or arrays that might include objects) for\n      // .equals, because JSON.stringify doesn't canonicalize object key\n      // order. (We can make equals have the right return value by parsing the\n      // current value and using EJSON.equals, but we won't have a canonical\n      // element of keyValueDeps[key] to store the dependency.) You can still use\n      // \"EJSON.equals(reactiveDict.get(key), value)\".\n      //\n      // XXX we could allow arrays as long as we recursively check that there\n      // are no objects\n      if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n        throw new Error(\"ReactiveDict.equals: value must be scalar\");\n      }\n      var serializedValue = stringify(value);\n\n      if (Tracker.active) {\n        self._ensureKey(key);\n\n        if (!_.has(self.keyValueDeps[key], serializedValue)) self.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n\n        var isNew = self.keyValueDeps[key][serializedValue].depend();\n        if (isNew) {\n          Tracker.onInvalidate(function () {\n            // clean up [key][serializedValue] if it's now empty, so we don't\n            // use O(n) memory for n = values seen ever\n            if (!self.keyValueDeps[key][serializedValue].hasDependents()) delete self.keyValueDeps[key][serializedValue];\n          });\n        }\n      }\n\n      var oldValue = undefined;\n      if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);\n      return EJSON.equals(oldValue, value);\n    }\n\n    return equals;\n  }(),\n\n  all: function () {\n    function all() {\n      this.allDeps.depend();\n      var ret = {};\n      _.each(this.keys, function (value, key) {\n        ret[key] = parse(value);\n      });\n      return ret;\n    }\n\n    return all;\n  }(),\n\n  clear: function () {\n    function clear() {\n      var self = this;\n\n      var oldKeys = self.keys;\n      self.keys = {};\n\n      self.allDeps.changed();\n\n      _.each(oldKeys, function (value, key) {\n        changed(self.keyDeps[key]);\n        if (self.keyValueDeps[key]) {\n          changed(self.keyValueDeps[key][value]);\n          changed(self.keyValueDeps[key]['undefined']);\n        }\n      });\n    }\n\n    return clear;\n  }(),\n\n  'delete': function () {\n    function _delete(key) {\n      var self = this;\n      var didRemove = false;\n\n      if (_.has(self.keys, key)) {\n        var oldValue = self.keys[key];\n        delete self.keys[key];\n        changed(self.keyDeps[key]);\n        if (self.keyValueDeps[key]) {\n          changed(self.keyValueDeps[key][oldValue]);\n          changed(self.keyValueDeps[key]['undefined']);\n        }\n        self.allDeps.changed();\n        didRemove = true;\n      }\n\n      return didRemove;\n    }\n\n    return _delete;\n  }(),\n\n  _setObject: function () {\n    function _setObject(object) {\n      var self = this;\n\n      _.each(object, function (value, key) {\n        self.set(key, value);\n      });\n    }\n\n    return _setObject;\n  }(),\n\n  _setDefaultObject: function () {\n    function _setDefaultObject(object) {\n      var self = this;\n\n      _.each(object, function (value, key) {\n        self.setDefault(key, value);\n      });\n    }\n\n    return _setDefaultObject;\n  }(),\n\n  _ensureKey: function () {\n    function _ensureKey(key) {\n      var self = this;\n      if (!(key in self.keyDeps)) {\n        self.keyDeps[key] = new Tracker.Dependency();\n        self.keyValueDeps[key] = {};\n      }\n    }\n\n    return _ensureKey;\n  }(),\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData: function () {\n    function _getMigrationData() {\n      // XXX sanitize and make sure it's JSONible?\n      return this.keys;\n    }\n\n    return _getMigrationData;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/packages/reactive-dict/reactive-dict.js"],"names":[],"mappings":"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","file":"/packages/reactive-dict/reactive-dict.js.map","sourcesContent":["// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nvar stringify = function (value) {\n  if (value === undefined)\n    return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function (serialized) {\n  if (serialized === undefined || serialized === 'undefined')\n    return undefined;\n  return EJSON.parse(serialized);\n};\n\nvar changed = function (v) {\n  v && v.changed();\n};\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nReactiveDict = function (dictName) {\n  // this.keys: key -> value\n  if (dictName) {\n    if (typeof dictName === 'string') {\n      // the normal case, argument is a string name.\n      // _registerDictForMigrate will throw an error on duplicate name.\n      ReactiveDict._registerDictForMigrate(dictName, this);\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};\n      this.name = dictName;\n    } else if (typeof dictName === 'object') {\n      // back-compat case: dictName is actually migrationData\n      this.keys = dictName;\n    } else {\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n    }\n  } else {\n    // no name given; no migration will be performed\n    this.keys = {};\n  }\n\n  this.allDeps = new Tracker.Dependency;\n  this.keyDeps = {}; // key -> Dependency\n  this.keyValueDeps = {}; // key -> Dependency\n};\n\n_.extend(ReactiveDict.prototype, {\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n  set: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      self._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    value = stringify(value);\n\n    var keyExisted = _.has(self.keys, key);\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';\n    var isNewValue = (value !== oldSerializedValue);\n\n    self.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      self.allDeps.changed();\n    }\n\n    if (isNewValue) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldSerializedValue]);\n        changed(self.keyValueDeps[key][value]);\n      }\n    }\n  },\n\n  setDefault: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      self._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    if (! _.has(self.keys, key)) {\n      self.set(key, value);\n    }\n  },\n\n  get: function (key) {\n    var self = this;\n    self._ensureKey(key);\n    self.keyDeps[key].depend();\n    return parse(self.keys[key]);\n  },\n\n  equals: function (key, value) {\n    var self = this;\n\n    // Mongo.ObjectID is in the 'mongo' package\n    var ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    var serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      self._ensureKey(key);\n\n      if (! _.has(self.keyValueDeps[key], serializedValue))\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n\n      var isNew = self.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(function () {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())\n            delete self.keyValueDeps[key][serializedValue];\n        });\n      }\n    }\n\n    var oldValue = undefined;\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);\n    return EJSON.equals(oldValue, value);\n  },\n\n  all: function() {\n    this.allDeps.depend();\n    var ret = {};\n    _.each(this.keys, function(value, key) {\n      ret[key] = parse(value);\n    });\n    return ret;\n  },\n\n  clear: function() {\n    var self = this;\n\n    var oldKeys = self.keys;\n    self.keys = {};\n\n    self.allDeps.changed();\n\n    _.each(oldKeys, function(value, key) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][value]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n    });\n\n  },\n\n  delete: function(key) {\n    var self = this;\n    var didRemove = false;\n\n    if (_.has(self.keys, key)) {\n      var oldValue = self.keys[key];\n      delete self.keys[key];\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldValue]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n      self.allDeps.changed();\n      didRemove = true;\n    }\n\n    return didRemove;\n  },\n\n  _setObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.set(key, value);\n    });\n  },\n\n  _setDefaultObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.setDefault(key, value);\n    });\n  },\n\n  _ensureKey: function (key) {\n    var self = this;\n    if (!(key in self.keyDeps)) {\n      self.keyDeps[key] = new Tracker.Dependency;\n      self.keyValueDeps[key] = {};\n    }\n  },\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData: function () {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n});\n"]},"hash":"eeb5a324866a9effd58213907e7846d794998a79"}
