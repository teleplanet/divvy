{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/reactive-dict/migration.js","filenameRelative":"/packages/reactive-dict/migration.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/reactive-dict/migration.js.map","sourceFileName":"/packages/reactive-dict/migration.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"migration"},"ignored":false,"code":"ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate) {\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n    }return [true, { dicts: dataToMigrate }];\n  });\n}","ast":null,"map":{"version":3,"sources":["/packages/reactive-dict/migration.js"],"names":[],"mappings":"AAAA,aAAa,iBAAb,GAAiC,EAAjC,C;AACA,aAAa,eAAb,GAA+B,EAA/B,C;;AAEA,aAAa,iBAAb,GAAiC,UAAU,QAAV,EAAoB;AACnD,MAAI,EAAE,GAAF,CAAM,aAAa,iBAAnB,EAAsC,QAAtC,CAAJ,EACE,OAAO,aAAa,iBAAb,CAA+B,QAA/B,CAAP;;AAEF,SAAO,IAAP;AACD,CALD;;AAOA,aAAa,uBAAb,GAAuC,UAAU,QAAV,EAAoB,IAApB,EAA0B;AAC/D,MAAI,EAAE,GAAF,CAAM,aAAa,eAAnB,EAAoC,QAApC,CAAJ,EACE,MAAM,IAAI,KAAJ,CAAU,kCAAkC,QAA5C,CAAN;;AAEF,eAAa,eAAb,CAA6B,QAA7B,IAAyC,IAAzC;AACD,CALD;;AAOA,IAAI,OAAO,QAAP,IAAmB,QAAQ,MAA/B,EAAuC;;;AAGrC,MAAI,gBAAgB,QAAQ,MAAR,CAAe,MAAf,CAAsB,cAAtB,CAAqC,eAArC,CAApB;AACA,MAAI,iBAAiB,cAAc,KAAnC,EACE,aAAa,iBAAb,GAAiC,cAAc,KAA/C;;;;AAIF,UAAQ,MAAR,CAAe,MAAf,CAAsB,UAAtB,CAAiC,eAAjC,EAAkD,YAAY;AAC5D,QAAI,iBAAiB,aAAa,eAAlC;AACA,QAAI,gBAAgB,EAApB;;AAEA,SAAK,IAAI,QAAT,IAAqB,cAArB;AACE,oBAAc,QAAd,IAA0B,eAAe,QAAf,EAAyB,iBAAzB,EAA1B;AADF,KAGA,OAAO,CAAC,IAAD,EAAO,EAAC,OAAO,aAAR,EAAP,CAAP;AACD,GARD;AASD","file":"/packages/reactive-dict/migration.js.map","sourcesContent":["ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName))\n    return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n"]},"hash":"76b6cf6ddc8d0b195dcaf6441bee48ba1576152b"}
